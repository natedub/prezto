#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

if [[ -x /usr/libexec/java_home ]]; then
  export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
fi

export PIP_REQUIRE_VIRTUALENV=true
export VIRTUAL_ENV_DISABLE_PROMPT=1

export EDITOR=vim
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'

export KEYTIMEOUT=1              # keybind vi defaults to 0.4s delay switching modes, reduce to 0.1

HISTSIZE=10000000
SAVEHIST=10000000
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

alias nose='nosetests -v --beautify'
alias qgit='qgit --branches --remotes --since="6 months ago" &> /dev/null &'

alias gitst="git status --column=auto"
alias gitc="git commit"
alias gitcam='git commit --amend -C HEAD'
alias gitd="git diff"
#alias gitdi="vim -c Gdiff"
alias gitrb="git rebase"
alias gitrbi="git rebase --autosquash -i"
alias gitrbic="git rebase -i \`git merge-base origin/master head\`"
alias gitrba="git rebase --abort"
alias gitrbc="git rebase --continue"
alias gitrbs="git rebase --skip"
alias gitrbo="git rebase --onto"
#alias gitsrc="git show \`head -n 1 .git/rebase-apply/patch\`"
alias gitco="git checkout"
alias gitcp="git cherry-pick"
alias gitbr="git branch"
alias gitf="git fetch"
alias gita="git add"
alias gitai="git add -i"
alias gitstg='git diff --cached'
alias gitap="git add -p"
alias gitmv="git mv"
alias gitrm="git rm"
alias gitmf="git merge --ff-only"
alias gitmg="git merge --no-ff"
alias gitmm="CURRENT_BRANCH=\`git rev-parse --abbrev-ref HEAD\`; git checkout master && git merge --no-ff \$CURRENT_BRANCH"
alias gitsth="git stash"
alias gitrst="git reset"
alias gitpo="git push origin"
alias gitpocurr='git push origin `git rev-parse --abbrev-ref HEAD`'
alias gitgrep="git grep -I -n --break --heading"
alias gitgrepo="PAGER=vi git grep -I -n -O"
alias gitres="PAGER=vi git grep -I -n -O '<<<<<<<'"
alias gitresd="git status --porcelain | grep -E '^(UU|AA) ' | awk '{print \$2}' | xargs git add"
#alias gitlg='git log --color --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --'

gitcleanup() {
	git remote prune origin;
	for x in `git branch --merged origin/master | grep -v master`; do git branch -d $x; done;
	for x in `git branch -r --merged origin/master | grep -v master | grep -v production | awk '{print(substr($1, 8))}'`; do git push origin :$x; done;
}
gitignoreconficted() {
	echo git add $1 && git reset HEAD $1 || git checkout $1;
}

if [[ -e ~/.profilelocal ]]; then
  source ~/.profilelocal
fi

if type direnv > /dev/null; then
  eval "$(direnv hook zsh)"
fi

if [[ -d "$HOME/.nvm" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  export NODE_VERSIONS="$NVM_DIR/versions/node"
  export NODE_VERSION_PREFIX=v
fi

gulp() {
	"$(npm bin)/gulp" "$@"
}
tsc() {
	"$(npm bin)/tsc" "$@"
}

httpie() {
	"$(pyenv root)/versions/httpie/bin/http" "$@"
}

docker-for-mac() {
	docker run -it --rm --privileged --pid=host justincormack/nsenter1
}
